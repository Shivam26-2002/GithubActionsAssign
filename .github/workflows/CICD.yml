name: CICD
on:
  workflow_dispatch:

jobs:
  Message1:
    runs-on: ubuntu-latest
    steps:
      - name: First Job
        run : echo "Building"

  Build:
    runs-on: ubuntu-latest
    continue-on-error: true
    # envs
    steps:
      - id: step1
        run: echo "Build Job"

  Message2:
    runs-on: ubuntu-latest
    needs: Build
    steps: 
      - name: Third Job
        run: echo "test=${{needs.Build.result}}" >> "GITHUB_OUTPUT"
        # run: echo "Uploading"

  Upload:
    runs-on: ubuntu-latest
    # continue-on-error: true
    needs: Build
    if: success()
    steps:
      - name: Fourth Job
        run: |
          exit 1
      - name: Always
        run: echo " Always runs "
        # run: echo "Upload Job"

  Message3:
    runs-on: ubuntu-latest
    needs: Upload
    steps: 
      - name: Fifth Job
        # run: echo "Processing"
        run: echo "test=${{needs.Upload.result}}" >> "GITHUB_OUTPUT"

  Process:
    runs-on: ubuntu-latest
    needs: Upload
    if: success()
    steps:
      - name: Sixth Job
        run: echo "Process Job"

  Result:
    runs-on: ubuntu-latest
    name: Result
    needs: [Build,Upload,Process]
    if: always()
    steps:
      - id: step2
        if: ${{ always() && contains(needs.*.result, 'failure') }}
        run: echo "One of the Jobs failed"
      - id: step1
        # run: buildAns
        run: |
          if [[ ("${{needs.Build.result}}" == "success") && ( "${{needs.Upload.result}}" == "success" ) && ( "${{needs.Process.result}}" == "success" ) ]]; then
            echo " All Jobs succeeded " 
          elif [[ ("${{needs.Build.result}}" == "failure") || ( "${{needs.Upload.result}}" == "failure" ) || ( "${{needs.Process.result}}" == "failure" ) ]]; then
            echo " One of the jobs failed " 
          else
            echo "All Jobs cancelled"
          fi
