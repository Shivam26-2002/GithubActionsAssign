name: Extract Text
on: workflow_dispatch
jobs:
  extract:
    runs-on: ubuntu-latest
    steps:
      - name: Test multi line string
        id: mainOutput
        run: |
          npm install fs
          npm install @actions/core
          node - <<EOF
            const fs = require('fs');
            const core = require('@actions/core');
            const pattern1 = /\d+ms\s+\d+\s+\d+\s+-+\s+-+\s+-+/;
            const pattern2 = /(\d{2}:\d{2})\s+(\d+)\s+(\d+)\s+(-+)\s+(-+)\s+(-+)/;
            //const pattern3 = /(\d+:\d+)\s+(\d+)\s+(\d+)\s+(\d+)\s+(-+)\s+(-+)/;
            const pattern3 = /(\d+:\d+)\s+((?:\d+|-+)\s+){4,}/;
            const pattern4 = /(\d+ms)\s+((?:\d+|-+)\s+){4,}/;
            let pattern_removal;
            let matches_finall;
             lastLine = "âœ–  1 of 2 failed (50%)                      00:10        -        2        1        -        -"
            // pattern3
            // lastLine = "âœ–  2 of 2 failed (50%)                         124ms        -        2        1        -        -"
            // pattern4
            // lastLine = "âœ–  2 of 2 failed (50%)                           462ms        3        -        2        -        1"
            //lastLine = "âœ”  All specs passed!                        00:09        -        3        1        -        -"
            // pattern3
             lastLine = "âœ”  All specs passed!                        124ms        2        2        2        2        2"
            // pattern4
            console.log(lastLine);
            // const extractedPart5 = lastLine.match(pattern5)[0];
            // console.log(extractedPart5);
            console.log(" Start IF condition ");
            //if (pattern1.test(lastLine)) {
              //  matches_finall = lastLine.match(pattern1);
               // pattern_removal = pattern1;
                //console.log("Pattern1");
                //console.log("Pattern to be used is:", pattern_removal)
            //}
            //else if(pattern2.test(lastLine)){
                //matches_finall = lastLine.match(pattern2);
                //pattern_removal = pattern2;
                //console.log("Pattern2");
                //console.log("Pattern to be used is:", pattern_removal);
            //}
            if(pattern3.test(lastLine)){
                matches_finall = lastLine.match(pattern3);
                pattern_removal = pattern3;
                console.log("Pattern3");
                console.log("Pattern to be used is:", pattern_removal);
            }
            else if(pattern4.test(lastLine)){
                matches_finall = lastLine.match(pattern4);
                pattern_removal = pattern4;
                console.log("Pattern4");
                console.log("Pattern to be used is:", pattern_removal);
            }
            const extractedPart = lastLine.match(pattern_removal)[0];
            console.log(extractedPart);
            const replacedPart = extractedPart.replace(/-/g, '0');
            const parts = replacedPart.split(/\s+/);
            const duration = parts[0];
            const passed = parts[2];
            const failed = parts[3];
            const pending = parts[4];
            const skipped = parts[5];
            let final_duration;
            if (duration.includes(':')) {
               const [minutes, seconds] = duration.split(':').map(Number);
               final_duration = minutes * 60 + seconds;
            } else if (duration.includes('ms')) {
               const milliseconds = parseInt(duration);
                final_duration = milliseconds / 1000;
            }
            console.log("Final duration is", final_duration);
            console.log("Passed", passed);
            let main_result;
            if (failed == 0){
              main_result = "Passingâœ…";
            }
            else{
              main_result = "FailingðŸ”´";
            }
            core.setOutput('MainResult', main_result);
            fs.writeFileSync('main_result.txt', main_result);
          EOF
          echo "Printing main Result"
          main_result=$(<main_result.txt)
          echo "Main result is $main_result"
          # echo "${{steps.mainOutput.outputs.MainResult}}"
          if [[ $main_result == "FailingðŸ”´"]]; then
            exit 1
          fi

      - name: Print output
        run: |
          echo "${{steps.mainOutput.outputs.MainResult}}"       
